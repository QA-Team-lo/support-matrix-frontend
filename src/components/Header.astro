---
import { siteConfig } from "@/config/site";
import { ModeToggle } from "./ModeToggle";
import { LangToggle } from "./LangToggle";
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import { Github } from "lucide-react";
import { Button } from "@/components/ui/button";
import SidebarToggle from "./SidebarToggle";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const currentPath = Astro.url.pathname;

const navigation = [
  {
    label: t("nav.board"),
    href: getRelativeLocaleUrl(lang, "", {
      normalizeLocale: false,
    }),
  },
  {
    label: t("nav.table"),
    href: getRelativeLocaleUrl(lang, "table/", {
      normalizeLocale: false,
    }),
  },
  {
    label: t("nav.list"),
    href: getRelativeLocaleUrl(lang, "reports/", {
      normalizeLocale: false,
    }),
  },
];
---

<script is:inline>
  function setDarkMode(document) {
    const getThemePreference = () => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    };
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  }

  setDarkMode(document);

  document.addEventListener("astro:before-swap", (ev) => {
    // Pass the incoming document to set the theme on it
    setDarkMode(ev.newDocument);
  });
</script>

<header class="border-b py-4 relative">
  <div class="container mx-auto lg:max-w-5xl">
    <div class="flex justify-between items-center">
      <!-- Logo -->
      <a
        href={siteConfig.links.ruyisdk}
        class="text-xl font-bold flex items-center gap-2"
      >
        <img src="/favicon.svg" alt="Logo" class="h-8 w-8" />
        {siteConfig.name}
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex items-center space-x-6">
        {navigation.map((item) => (
          <a
            href={item.href}
            class="text-xl hover:text-primary transition-colors"
          >
            {item.label}
          </a>
        ))}
      </nav>

      <!-- Desktop Controls -->
      <div class="hidden lg:flex items-center space-x-2">
        <a
          href={siteConfig.links.github}
          target="_blank"
          rel="noopener noreferrer"
          style={{ textDecoration: "none" }}
        >
          <Button variant="ghost" size="icon">
            <Github className="h-5 w-5" />
          </Button>
        </a>

        <LangToggle client:load currentPath={currentPath} />
        <ModeToggle client:load />
      </div>

      <!-- Mobile Sidebar Toggle -->
      <SidebarToggle
        client:load
        navigation={navigation}
        github={siteConfig.links.github}
        currentPath={currentPath}
      />
    </div>
  </div>
</header>