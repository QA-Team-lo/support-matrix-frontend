---
import { getSysData } from "@/lib/data";

import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "./ui/card";

import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export interface Props {
  boardDir: string;
  className?: string;
  showToc?: boolean;
  osFilter?: string;
  osList?: Array<{ linkName: string; systemDir: string; fileName?: string }>;
}

const { boardDir, showToc = true, osFilter = null, osList = [] } = Astro.props;

// Variables to store content and state
let content = "";
let osContent = "";
let osDetails = [];
let isLoading = true;
let error = null;

try {
  // If osFilter is provided, get specific OS content
  if (osFilter) {
    const sysData = await getSysData(boardDir, osFilter);
    if (sysData) {
      osDetails.push({
        systemDir: sysData.dir,
        linkName: sysData.sys,
      });
    }
  } else {
    for (const os of osList) {
      const sysData = await getSysData(boardDir, os.systemDir);
      if (sysData) {
        osDetails.push({
          sysDir: sysData.dir,
          sysStatus: sysData.status,
          sysUpdate: sysData.last_update,
          sysVer: sysData.sys_ver,
          linkName: os.linkName,
        });
      }
    }
  }
} catch (e: unknown) {
  error = `Error loading data: ${e instanceof Error ? e.message : String(e)}`;
  console.error(error);
} finally {
  isLoading = false;
}

// Determine which content to display
const displayContent = osFilter ? osContent : content;
---

{
  isLoading && (
    <div class="p-4 text-center">
      <div
        class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"
        role="status"
      >
        <span class="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">
          Loading...
        </span>
      </div>
      <p class="mt-2 text-muted-foreground">Loading content...</p>
    </div>
  )
}

{
  !isLoading && error && (
    <div class="p-4 border border-red-300 bg-red-50 text-red-700 rounded-md">
      {error}
    </div>
  )
}

{
  !isLoading && (
    <div class={showToc ? "lg:col-span-3" : ""}>
      {/* Display OS list with enhanced details if not filtered */}
      {!osFilter && osDetails.length > 0 && (
        <div class="mb-8">
          <div class="rounded-lg mb-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              {osDetails.map((os) => (
                <a
                  href={getRelativeLocaleUrl(
                    lang,
                    `board/${boardDir}/${os.linkName}`,
                    {
                      normalizeLocale: false,
                    },
                  )}
                  class=""
                >
                  <Card className="hover:shadow-lg hover:bg-muted transition-shadow h-full">
                    <CardHeader className="items-center">
                      <CardTitle>{os.linkName}</CardTitle>
                      {(() => {
                        const status = os.sysStatus.toUpperCase();
                        const statusClass =
                          status === "GOOD"
                            ? "bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100"
                            : status === "BASIC"
                              ? "bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100"
                              : status === "CFH"
                                ? "bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100"
                                : status === "CFT"
                                  ? "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100"
                                  : "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100";

                        return (
                          <span
                            class={`inline-block px-2 py-1 rounded-md font-medium ${statusClass}`}
                          >
                            {status}
                          </span>
                        );
                      })()}
                    </CardHeader>
                    <CardContent>
                      <div class="space-y-2 text-sm text-muted-foreground">
                        <div class="flex items-center">
                          <span class="w-24">{t("sys.version")}</span>
                          <span>{os.sysVer}</span>
                        </div>
                        <div class="flex items-center">
                          <span class="w-24">{t("sys.update")}</span>
                          <span>{os.sysUpdate}</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </a>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
