---
// Dynamic route for specific board and operating system
import Layout from "../../../layouts/Layout.astro";
import { getAllBoardsData, getBoardData } from "../../../lib/data";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
} from "../../../components/ui/card";

// Generate static paths for all boards and their operating systems
export async function getStaticPaths() {
  const boardsData = await getAllBoardsData();
  const paths = [];

  // For each board, extract OS information and create paths
  for (const board of boardsData) {
    const boardDir = board.dir;

    // Read the README.md file to extract OS information
    const readmePath = `/support-matrix/${boardDir}/README.md`;
    const readmeFiles = import.meta.glob("/support-matrix/*/README.md", {
      query: "?raw",
      import: "default",
    });
    const importReadme = readmeFiles[readmePath];

    if (importReadme) {
      try {
        const content = await importReadme();

        const linkRegex = /\[([\w\-_]+)\]:\s*\.\/([\w\-_]+)\/([\w\-_]+)\.md/g;
        const matches = [...content.matchAll(linkRegex)];

        for (const match of matches) {
          const linkName = match[1];
          const systemDir = match[2];
          const fileName = match[3];

          paths.push({
            params: {
              dir: boardDir,
              system: linkName,
            },
            props: {
              boardDir,
              osName: linkName,
              systemDir,
              fileName,
            },
          });
        }
      } catch (error) {
        console.error(`Error processing ${boardDir}: ${error}`);
      }
    }
  }

  return paths;
}

// Get the board directory and OS name from props
const { boardDir, osName, systemDir, fileName } = Astro.props;

let board;
let error = null;
let Content = null;

try {
  board = await getBoardData(boardDir);

  if (!board) {
    error = `Board information for "${boardDir}" not found`;
  } else {
    try {
      const osFilePath = `/support-matrix/${boardDir}/${systemDir}/${fileName}.md`;

      // Import the Markdown file directly as a component
      const mdFiles = import.meta.glob("/support-matrix/**/*.md");

      if (mdFiles[osFilePath]) {
        const { Content: ImportedContent, frontmatter } =
          await mdFiles[osFilePath]();
        Content = ImportedContent;
      } else {
        error = `OS information file not found: ${osFilePath}`;
      }
    } catch (e) {
      error = `Error loading OS data: ${e instanceof Error ? e.message : String(e)}`;
      console.error(error);
    }
  }
} catch (e) {
  error = `Error loading board data: ${e instanceof Error ? e.message : String(e)}`;
  console.error(error);
}

// Generate page title
const title = board ? `${osName} on ${board.product}` : "System Not Found";
---

<Layout title={title}>
  <div class="max-w-4xl mx-auto">
    <a
      href={`/board/${boardDir}`}
      class="text-primary hover:underline mb-6 inline-block"
    >
      ‚Üê Back to {board ? board.product : boardDir}
    </a>

    {
      error ? (
        <div class="p-6 border border-red-300 bg-red-50 text-red-700 rounded-md">
          <h1 class="text-2xl font-bold mb-4">Error</h1>
          <p>{error}</p>
        </div>
      ) : (
        <>
          <Card className="mb-8">
            <CardHeader>
              <CardTitle className="text-2xl">
                {osName} on {board!.product}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div class="space-y-4">
                <div class="prose max-w-none">
                  {Content ? (
                    <Content />
                  ) : (
                    <p>
                      No detailed information available for this operating
                      system.
                    </p>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>

          <div class="mt-8">
            <p class="text-sm text-muted-foreground">
              Source:
              <a
                href={`https://github.com/ruyisdk/support-matrix/blob/main/${boardDir}/${systemDir}/${fileName}.md`}
                target="_blank"
                rel="noopener noreferrer"
                class="text-primary hover:underline"
              >
                Support Matrix
              </a>
            </p>
          </div>
        </>
      )
    }
  </div>
</Layout>
